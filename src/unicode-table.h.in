/*
##header
 */

#pragma once

#ifdef __cplusplus
extern "C" {
#endif

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stddef.h>
#include <stdint.h>

/**
 * Maximum allowed Unicode value.
 */
#define {c:MAX_VALUE} 0x10FFFF

/**
 * Minimum valid range for sequence sizes. Value is expressed as shift.
 *
 * ```
 * 0XXXXXXX
 * 110XXXXX 10XXXXXX                                      (1 << 7)
 * 1110XXXX 10XXXXXX 10XXXXXX                             (1 << 11)
 * 11110XXX 10XXXXXX 10XXXXXX 10XXXXXX                    (1 << 16)
 * 111110XX 10XXXXXX 10XXXXXX 10XXXXXX 10XXXXXX           (1 << 21)
 * 1111110X 10XXXXXX 10XXXXXX 10XXXXXX 10XXXXXX 10XXXXXX  (1 << 26)
 * ```
 */
#define {c:VALID_RANGES} (\
	(7UL << 5) | \
	(11UL << 10) | \
	(16UL << 15) | \
	(21UL << 20) | \
	(26UL << 25))

{if:addFlags}
/**
 * Flags for determining character type.
 */
typedef enum {
	{c:FlagLetter}       = 1 << 0,  ///< Is letter.
	{c:FlagUppercase}    = 1 << 1,  ///< Is uppercase letter.
	{c:FlagLowercase}    = 1 << 2,  ///< Is lowercase letter.
	{c:FlagTitlecase}    = 1 << 3,  ///< Is titlecase letter.
	{c:FlagSpace}        = 1 << 4,  ///< Is space character.
	{c:FlagLinebreak}    = 1 << 5,  ///< Is linebreak.
	{c:FlagPunctuation}  = 1 << 6,  ///< Is punctuation character.
	{c:FlagDigit}        = 1 << 7,  ///< Is digit character.
	{c:FlagNumber}       = 1 << 8,  ///< Is number character.
	{c:FlagFraction}     = 1 << 9,  ///< Is fraction character.
	{c:FlagControl}      = 1 << 10, ///< Is control character.
	{c:FlagSymbol}       = 1 << 11, ///< Is symbol.
	{c:FlagOther}        = 1 << 12, ///< Other character.
	{c:FlagUpperExpands} = 1 << 13, ///< Uppercase expands to multiple characters.
	{c:FlagLowerExpands} = 1 << 14, ///< Lowercase expands to multiple characters.
	{c:FlagTitleExpands} = 1 << 15, ///< Titlecase expands to multiple characters.
} {n:Flag};
{endif:}

{if:addCategories}
/**
 * Character categories.
 */
typedef enum {
##categories
} {n:Category};
{endif:}

{if:addCasing}
/**
 * Case variant index usable for `cases` field in UTInfo.
 */
typedef enum {
	{c:CaseUpper} = 0, ///< Index for uppercase variant.
	{c:CaseLower} = 1, ///< Index for lowercase variant.
	{c:CaseTitle} = 2, ///< Index for titlecase variant.
} {n:Case};
{endif:}

/**
 * A Unicode character value.
 */
typedef uint32_t {n:Glyph};

/**
 * Character info.
 */
typedef struct {
{if:addFlags}
	uint32_t flags;    ///< Combination of {n:Flag}.
{endif:}
{if:addCategories}
	uint32_t category; ///< One of {n:Category}.
{endif:}
{if:addCasing}
	int32_t cases[3];  ///< Distance to case variant. Indexable with {n:Case}.
{endif:}
{if:addNumbers}
	union {
		int64_t num;      ///< Number value if `flags & {c:FlagNumber}`.
		char const* frac; ///< Fraction string if `flags & {c:FlagFraction}`.
	};
{endif:}
} {n:Info};

{if:addCasing}
/**
 * Helper struct for reading special case-folding sequences.
 */
typedef struct {
	{n:Glyph} count;    ///< Number of characters.
	{n:Glyph} glyphs[]; ///< Sequence of characters.
} {n:SpecialCase};
{endif:}

{if:addCasing}
/**
 * Special case-folding sequences.
 */
extern {n:Glyph} const {n:SpecialCases}[];
{endif:}

/**
 * Character information indexable with values from {n:InfoIndex}.
 */
extern {n:Info} const {n:Infos}[];

/**
 * Character page lookup table.
 */
extern {v:pagesType} const {n:PageIndex}[];

/**
 * Character lookup table.
 */
extern {v:infoType} const {n:InfoIndex}[][256];

{if:addCategories}
/**
 * Category name indexable with {n:Category}.
 */
extern char const* const {n:CategoryNames}[];
{endif:}

/**
 * Lookup character by value.
 *
 * @param glyph A Unicode character value.
 * @return Character info.
 */
static inline {n:Info} const* {n:LookupGlyph}({n:Glyph} glyph) {
	{v:pagesType} page;
	{v:infoType} offset = 0;

	if (glyph <= {c:MAX_VALUE}) {
		page = {n:PageIndex}[glyph >> 8];
		offset = {n:InfoIndex}[page][glyph & 0xFF];
	}

	return &{n:Infos}[offset];
}

{if:addCasing}
/**
 * Get special case-folding sequence of character.
 *
 * @param glyph A unicode character.
 * @param info Character information of @p glyph.
 * @param variant Case variant.
 * @return Case-folding sequence or `NULL` if none exists for given case variant.
 */
static inline {n:SpecialCase} const* {n:GetSpecialCase}({n:Glyph} glyph, {n:Info} const* info, {n:Case} variant) {
	if (info->flags & ({c:FlagUpperExpands} << variant)) {
		return ({n:SpecialCase} const*) &{n:SpecialCases}[info->cases[variant]];
	}

	return NULL;
}
{endif:}

/**
 * Get minimum valid glyph value for UTF-8 sequence with @p length continuation bytes.
 *
 * @param length Number of UTF-8 continuation bytes.
 * @return Minimum valid glyph value.
 */
static inline {n:Glyph} {n:MinValidGlyph}(int length) {
	return 1U << (({c:VALID_RANGES} >> (length * 5)) & 0x1F);
}

#ifdef __cplusplus
}
#endif
