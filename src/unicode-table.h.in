/**
##header
 */

#ifndef _{c:UNICODE_TABLE}_H_
#define _{c:UNICODE_TABLE}_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <stdlib.h>
#include <stdint.h>

/**
 * Maximum allowed unicode value
 */
#define {c:MAX_VALUE} 0x10FFFF

/**
 * Flags for determining character type
 */
typedef enum {
	{c:FlagLetter}       = 1 << 0,
	{c:FlagUppercase}    = 1 << 1,
	{c:FlagLowercase}    = 1 << 2,
	{c:FlagTitlecase}    = 1 << 3,
	{c:FlagSpace}        = 1 << 4,
	{c:FlagLinebreak}    = 1 << 5,
	{c:FlagPunctuation}  = 1 << 6,
	{c:FlagDigit}        = 1 << 7,
	{c:FlagNumber}       = 1 << 8,
	{c:FlagFraction}     = 1 << 9,
	{c:FlagControl}      = 1 << 10,
	{c:FlagSymbol}       = 1 << 11,
	{c:FlagOther}        = 1 << 12,
	{c:FlagUpperExpands} = 1 << 13,
	{c:FlagLowerExpands} = 1 << 14,
	{c:FlagTitleExpands} = 1 << 15,
} {n:Flag};

/**
 * Character categories
 */
typedef enum {
##categories
} {n:Category};

/**
 * Index usable for `cases` in `{n:Info}`
 */
typedef enum {
	{c:CaseUpper} = 0,
	{c:CaseLower} = 1,
	{c:CaseTitle} = 2,
} {n:Case};

/**
 * Character info
 */
typedef struct {
	uint32_t flags;    // flags of `{c:Flag}`
	uint32_t category; // one of `{n:Category}`
	int32_t cases [3]; // indexable with `{n:Case}`
	union {
		int64_t i;      // number value if `info & {c:FlagNumber}`
		char const * s; // fraction string if `info & {c:FlagFraction}`
	} number;
} {n:Info};

/**
 * The character
 */
typedef uint32_t {n:Rune};

/**
 * Character info
 */
extern {n:Info} const {n:Infos} [];

/**
 * Lookup table page indexes
 */
extern uint16_t const {n:PageIndex} [];

/**
 * Lookup table info indexes
 */
extern uint16_t const {n:InfoIndex} [][256];

/**
 * Special case-folding characters
 */
extern {n:Rune} const {n:SpecialCases} [];

/**
 * Category name indexable with `{n:Category}`
 */
extern char const * const {n:CategoryNames} [];

/**
 * Lookup character by value
 */
static inline {n:Info} const * {n:LookupRune} ({n:Rune} rune) {
	uint32_t page, offset;

	if (rune > {c:MAX_VALUE}) {
		return & {n:Infos} [{c:CategoryInvalid}];
	}

	page   = {n:PageIndex} [rune >> 8];
	offset = {n:InfoIndex} [page][rune & 0xFF];

	return & {n:Infos} [offset];
}

#ifdef __cplusplus
}
#endif

#endif /* ! _{c:UNICODE_TABLE}_H_ */
